buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-database-postgresql:11.12.0'
    }
}

plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.flywaydb.flyway' version '11.12.0'
    id 'org.jooq.jooq-codegen-gradle' version '3.20.6'
}

group = 'ru.romanov.marketplace'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'org.apache.commons:commons-lang3:3.18.0'

    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.flywaydb:flyway-database-postgresql:11.12.0'

    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'

    compileOnly 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.jooq:jooq:3.20.6'
    jooqCodegen 'org.postgresql:postgresql'
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    'build/generated/sources/querydsl',
                    'build/generated/sources/jooq'
            ]
        }
    }
}

tasks.register('dockerUp', Exec) {
    group = 'docker'
    description = 'Start and running Docker container'
    commandLine "docker", "compose", "up", "-d", "postgres"
}

tasks.register('waitForPostgres') {
    doLast {
        def maxTries = 20
        def success = false
        for (i in 1..maxTries) {
            try {
                new Socket("localhost", 5440).withCloseable { s ->
                    success = true
                }
                break
            } catch(Exception ignored) {
                println "Postgres not ready yet... try $i"
                sleep(3000)
            }
        }
        if (!success) throw new GradleException('Postgres did not start in time')
    }
}

tasks.register('dockerDown', Exec) {
    group = 'docker'
    description = 'Stop and remove Docker container'
    commandLine "docker", "compose", "down"
}

tasks.named('flywayMigrate') {
    dependsOn 'dockerUp', 'waitForPostgres'
}

tasks.named('jooqCodegen') {
    dependsOn 'flywayMigrate'
    finalizedBy 'dockerDown'
}

tasks.named('compileJava') {
    dependsOn 'jooqCodegen'
}

tasks.named('test') {
    //useJUnitPlatform()
    enabled = false
}

flyway {
    driver = 'org.postgresql.Driver'
    url = project.findProperty('spring.datasource.url') ?: 'jdbc:postgresql://localhost:5440/MarketPlace_db'
    user = project.findProperty('spring.datasource.username') ?: 'postgres'
    password = project.findProperty('spring.datasource.password') ?: 'postgres'
}

jooq {
    configuration {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = project.findProperty('spring.datasource.url') ?: 'jdbc:postgresql://localhost:5440/MarketPlace_db'
            user = project.findProperty('spring.datasource.username') ?: 'postgres'
            password = project.findProperty('spring.datasource.password') ?: 'postgres'
        }
        generator {
            name = 'org.jooq.codegen.JavaGenerator'
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                includes = '.*'
                inputSchema = 'public'
            }
            target {
                packageName = 'ru.romanov.marketplace.productservice.jooq'
                directory = 'build/generated/sources/jooq'
            }
        }
    }
}
