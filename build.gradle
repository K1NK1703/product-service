import org.flywaydb.core.Flyway
import org.testcontainers.containers.PostgreSQLContainer

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-database-postgresql:11.12.0'
        classpath 'org.testcontainers:postgresql:1.21.3'
        classpath 'org.postgresql:postgresql:42.7.7'
    }
}

plugins {
    id 'java'
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.jooq.codegen)
    alias(libs.plugins.openapi.generator)
}

group = 'ru.romanov.marketplace'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Spring Boot
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.aop
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.jooq

    // Documentation
    implementation libs.springdoc.openapi

    // Logging
    implementation libs.logbook

    // MapStruct
    implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor

    // Tracing
    implementation libs.micrometer.tracing.bridge.otel

    // Utilities
    implementation libs.commons.lang3
    implementation libs.openapi.jackson

    // Database
    runtimeOnly libs.postgresql
    runtimeOnly libs.flyway.database.postgresql
    implementation libs.flyway.core

    // Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    // jOOQ
    implementation libs.jooq
    jooqCodegen libs.postgresql
    jooqCodegen libs.flyway.core
    jooqCodegen libs.testcontainers.postrgesql

    // Testing
    testImplementation libs.spring.boot.starter.test
    testRuntimeOnly libs.junit.platform.launcher

    // Jakarta
    compileOnly libs.jakarta.persistence.api
    annotationProcessor libs.jakarta.persistence.api
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    'build/generated/sources/jooq',
                    'build/generated/sources/openapi/src/main/java',
                    'build/generated/sources/annotationProcessor/java/main'
            ]
        }
    }
}

tasks.named('jooqCodegen') {
    def postgres = null;

    doFirst {
        postgres = new PostgreSQLContainer("postgres:17.5")
                .withDatabaseName("MarketPlace_db")
                .withUsername("postgres")
                .withPassword("postgres")

        postgres.start()

        Flyway.configure()
                .driver("org.postgresql.Driver")
                .dataSource(postgres.getJdbcUrl(), postgres.getUsername(), postgres.getPassword())
                .locations("filesystem:${projectDir}/src/main/resources/db/migration")
                .load()
                .migrate()

        jooq {
            configuration {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = postgres.getJdbcUrl()
                    user = postgres.getUsername()
                    password = postgres.getPassword()
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    strategy {
                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                        matchers {
                            tables {
                                table {
                                    pojoClass {
                                        transform = 'PASCAL'
                                        expression = '$0_POJO'
                                    }
                                }
                            }
                        }
                    }
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        inputSchema = 'public'
                    }
                    generate {
                        pojos = true
                    }
                    target {
                        packageName = 'ru.romanov.marketplace.productservice.jooq'
                        directory = 'build/generated/sources/jooq'
                    }
                }
            }
        }
    }
    doLast {
        if (postgres != null) {
            postgres.stop()
        }
    }
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "$rootDir/openapi/product_openapi.yml".toString()
    outputDir = layout.buildDirectory.dir("generated/sources/openapi").get().asFile.toString()
    apiPackage = 'ru.romanov.marketplace.productservice.api'
    modelPackage = 'ru.romanov.marketplace.productservice.dto'
    configOptions = [
            interfaceOnly: 'true',
            useSpringBoot3: 'true',
            useTags: 'true',
            serializableModel: 'true',
            serializationLibrary: 'jackson',
            skipDefaultInterface: 'true',
            useSpringController: 'true',
            useBeanValidation: 'true',
            openApiNullable: 'false'
    ]
    globalProperties = [
            modelDocs: 'false',
            modelTests: 'false'
    ]
}

tasks.named('compileJava') {
    dependsOn 'jooqCodegen', 'openApiGenerate'
}

tasks.named('test') {
    //useJUnitPlatform()
    enabled = false
}
