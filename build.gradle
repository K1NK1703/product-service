import org.codehaus.groovy.runtime.GStringImpl

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-database-postgresql:11.12.0'
    }
}

plugins {
    id 'java'
    id 'war'
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.flyway)
    alias(libs.plugins.jooq.codegen)
}

group = 'ru.romanov.marketplace'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Spring Boot
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.aop
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.jooq
    providedRuntime libs.spring.boot.starter.tomcat

    // Documentation
    implementation libs.springdoc.openapi

    // Logging
    implementation libs.logbook

    // Utilities
    implementation libs.commons.lang3

    // Development
    developmentOnly libs.spring.boot.docker.compose

    // Database
    runtimeOnly libs.postgresql
    runtimeOnly libs.flyway.database.postgresql

    // Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    // jOOQ
    implementation libs.jooq
    jooqCodegen libs.postgresql

    // Testing
    testImplementation libs.spring.boot.starter.test
    testRuntimeOnly libs.junit.platform.launcher

    // Jakarta
    compileOnly libs.jakarta.persistence.api
    annotationProcessor libs.jakarta.persistence.api
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    'build/generated/sources/querydsl',
                    'build/generated/sources/jooq'
            ]
        }
    }
}

def resolvePostgresPort = {
    def proc = ["docker", "compose", "port", "postgres", "5432"].execute()
    proc.waitFor()
    def output = proc.in.text.trim()
    return output.split(":")[-1]
}

tasks.register('dockerUp', Exec) {
    group = 'docker'
    description = 'Start and running Docker container'
    commandLine "docker", "compose", "up", "-d", "postgres"
}

tasks.register('waitForPostgres') {
    dependsOn 'dockerUp'
    doLast {
        def port = resolvePostgresPort() as int
        def maxTries = 20
        def success = false
        for (i in 1..maxTries) {
            try {
                new Socket("localhost", port).withCloseable { s ->
                    success = true
                }
                break
            } catch(Exception ignored) {
                println "Postgres not ready yet... try $i"
                sleep(3000)
            }
        }
        if (!success) throw new GradleException('Postgres did not start in time')
    }
}

tasks.register('dockerDown', Exec) {
    group = 'docker'
    description = 'Stop and remove Docker container'
    commandLine "docker", "compose", "down"
}

tasks.named('flywayMigrate') {
    dependsOn 'waitForPostgres'
    doFirst {
        def port = resolvePostgresPort() as int
        flyway {
            driver = 'org.postgresql.Driver'
            url = "jdbc:postgresql://localhost:${port}/MarketPlace_db" as GStringImpl
            user = project.findProperty('spring.datasource.username') ?: 'postgres'
            password = project.findProperty('spring.datasource.password') ?: 'postgres'
        }
    }
}

tasks.named('jooqCodegen') {
    dependsOn 'flywayMigrate'
    finalizedBy 'dockerDown'
    doFirst {
        def port = resolvePostgresPort() as int
        jooq {
            configuration {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = "jdbc:postgresql://localhost:${port}/MarketPlace_db" as GStringImpl
                    user = project.findProperty('spring.datasource.username') ?: 'postgres'
                    password = project.findProperty('spring.datasource.password') ?: 'postgres'
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        inputSchema = 'public'
                    }
                    generate {
                        pojos = true
                    }
                    target {
                        packageName = 'ru.romanov.marketplace.productservice.jooq'
                        directory = 'build/generated/sources/jooq'
                    }
                }
            }
        }
    }
}

tasks.named('compileJava') {
    dependsOn 'jooqCodegen'
}

tasks.named('test') {
    //useJUnitPlatform()
    enabled = false
}
